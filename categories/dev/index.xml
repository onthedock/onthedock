<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dev on On The Dock</title>
    <link>https://onthedock.github.io/categories/dev/index.xml</link>
    <description>Recent content in Dev on On The Dock</description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="https://onthedock.github.io/categories/dev/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Publica en Github Pages</title>
      <link>https://onthedock.github.io/post/publica-en-github-pages/</link>
      <pubDate>Mon, 03 Apr 2017 22:38:35 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/publica-en-github-pages/</guid>
      <description>&lt;p&gt;Cómo publicar el sitio web generado con Hugo en GitHub Pages.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Siguiendo las instrucciones de la página de Hugo sobre &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/#hosting-personal-organization-pages&#34;&gt;cómo publicar en Github Pages&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creo un repo llamado &lt;code&gt;onthedock.github.io&lt;/code&gt;: este albergará el sitio público.&lt;/li&gt;
&lt;li&gt;Creo un repo llamado &lt;code&gt;onthedock-hugo&lt;/code&gt; que contendrá todo el site: ficheros de hugo, el template, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Creo una carpeta local llamada &lt;code&gt;onthedock-githubpages&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Dentro de la carpeta, lanzo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git clone https://github.com/onthedock/onthedock-hugo.git`
Cloning into &#39;.&#39;...
warning: You appear to have cloned an empty repository.
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compruebo que tengo un repositorio local inicializado:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git status
On branch master

Initial commit

nothing to commit (create/copy files and use &amp;quot;git add&amp;quot; to track)
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copio el contenido del &lt;em&gt;site&lt;/em&gt; de Hugo (que previamente he movido a otra carpeta):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git status
On branch master
Initial commit
Untracked files:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)
	config.toml
	content/
	static/
	themes/
nothing added to commit but untracked files present (use &amp;quot;git add&amp;quot; to track)
$
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Las carpetas vacías no se añaden a Git.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eliminamos la carpeta &lt;code&gt;$HUGO/public&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Añadimos un &lt;a href=&#34;https://git-scm.com/book/es/v1/Las-herramientas-de-Git-Subm%C3%B3dulos&#34;&gt;&lt;em&gt;submodulo&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git submodule add -b master https://github.com/onthedock/onthedock.github.io.git public
Cloning into &#39;/Users/xavi/Dropbox/dev/hugo/onthedock-githubpages/public&#39;...
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), done.
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comprobamos el estado del repositorio:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git status
On branch master

Initial commit

Changes to be committed:
  (use &amp;quot;git rm --cached &amp;lt;file&amp;gt;...&amp;quot; to unstage)

	new file:   .gitmodules
	new file:   public

Untracked files:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)

	config.toml
	content/
	static/
	themes/

$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Añadimos los ficheros del &lt;em&gt;andamiaje&lt;/em&gt; de Hugo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git add .
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verifico que el repositorio &lt;em&gt;remoto&lt;/em&gt; es el correcto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git remote -v
origin	https://github.com/onthedock/onthedock-hugo.git (fetch)
origin	https://github.com/onthedock/onthedock-hugo.git (push)
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y subo el sitio al &lt;em&gt;repo&lt;/em&gt; remoto: &lt;code&gt;onthedock-hugo&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$  git push origin master
error: src refspec master does not match any.
error: failed to push some refs to &#39;https://github.com/onthedock/onthedock-hugo.git&#39;
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oopps.&lt;/p&gt;

&lt;p&gt;El problema era que no había guardado ningún cambio, por lo que no existía la rama &lt;code&gt;master&lt;/code&gt;. Aunque he interpretado correctamente el mensaje, he corregido el problema en el extremo opuesto (en el repositorio remoto); he creado un fichero &lt;code&gt;License.md&lt;/code&gt; y he lanzado &lt;code&gt;git pull&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git pull origin
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), done.
From https://github.com/onthedock/onthedock-hugo
 * [new branch]      master     -&amp;gt; origin/master
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt; hace un &lt;code&gt;git fetch&lt;/code&gt; y un &lt;code&gt;git merge&lt;/code&gt;, lo que crea un &lt;em&gt;commit&lt;/em&gt; (que era lo que me faltaba por hacer):&lt;/p&gt;

&lt;p&gt;Vuelvo a intentarlo y esta vez sí:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git commit

(había añadido los cambios al _staging area_ pero no los había guardado con _commit_)

$ git push origin master
Username for &#39;https://github.com&#39;: onthedock
Password for &#39;https://onthedock@github.com&#39;:
Counting objects: 64, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (56/56), done.
Writing objects: 100% (64/64), 3.28 MiB | 547.00 KiB/s, done.
Total 64 (delta 2), reused 0 (delta 0)
remote: Resolving deltas: 100% (2/2), done.
To https://github.com/onthedock/onthedock-hugo.git
   92f53f2..5ecc4bc  master -&amp;gt; master
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora voy a generar el sitio (después de actualizar el fichero &lt;code&gt;config.toml&lt;/code&gt; para que el parámetro &lt;code&gt;baseURL&lt;/code&gt; apunte a la dirección &lt;em&gt;pública&lt;/em&gt; del sitio en GitHub):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ hugo
Started building sites ...
Built site for language en:
0 draft content
0 future content
0 expired content
6 regular pages created
14 other pages created
0 non-page files copied
12 paginator pages created
8 tags created
2 categories created
total in 68 ms
$ git status
On branch master
Your branch is up-to-date with &#39;origin/master&#39;.
Changes not staged for commit:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)

	modified:   public (untracked content)

no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El contenido de la carpeta &lt;code&gt;$HUGO/public&lt;/code&gt;  está contenida en un &lt;em&gt;submódulo&lt;/em&gt; de Git.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd public/
$ git status
On branch master
Your branch is up-to-date with &#39;origin/master&#39;.
Untracked files:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)

	404.html
	categories/
	images/
	index.html
	index.xml
	page/
	post/
	sitemap.xml
	tags/

nothing added to commit but untracked files present (use &amp;quot;git add&amp;quot; to track)
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, desde este &lt;em&gt;sub-repositorio&lt;/em&gt;, lanzo &lt;code&gt;git add&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git add .
$ git status
On branch master
Your branch is up-to-date with &#39;origin/master&#39;.
Changes to be committed:
  (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)

	new file:   404.html
	new file:   categories/dev/index.html
	new file:   categories/dev/index.xml
	new file:   categories/dev/page/1/index.html
	new file:   categories/index.html
	new file:   categories/ops/index.html
	new file:   categories/ops/index.xml
	new file:   categories/ops/page/1/index.html
.
.
.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lanzo un &lt;em&gt;commit&lt;/em&gt; para guardar los cambios:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verifico que el repositorio remoto es &lt;code&gt;onthedock.github.io&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git remote -v
origin	https://github.com/onthedock/onthedock.github.io.git (fetch)
origin	https://github.com/onthedock/onthedock.github.io.git (push)
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora, subo los cambios al repositorio de GitHub Pages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git push origin master
Username for &#39;https://github.com&#39;: onthedock
Password for &#39;https://onthedock@github.com&#39;:
Counting objects: 104, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (74/74), done.
Writing objects: 100% (104/104), 911.20 KiB | 0 bytes/s, done.
Total 104 (delta 41), reused 0 (delta 0)
remote: Resolving deltas: 100% (41/41), done.
To https://github.com/onthedock/onthedock.git
   49c08af..5432d12  master -&amp;gt; master
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La web estará accesible en los próximos diez minutos, aproximadamente, en &lt;code&gt;http://onthedock.github.io&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;El nombre del repositorio debe ser &lt;code&gt;onthedock.github.io&lt;/code&gt;, y no sólo  &lt;code&gt;onthedock&lt;/code&gt;. Si te pasa como a mi y debes cambiar el nombre del &lt;em&gt;repo&lt;/em&gt; , recuerda que ¡puedes hacerlo!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Se puede renombrar el repositorio desde GitHub, pero eso supone que también hay que actualizar el nombre del repositorio en la configuración del  &lt;em&gt;remote&lt;/em&gt; en el repositorio local.&lt;/p&gt;

&lt;p&gt;Para ello, usa el comando:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git remote set-url origin https://github.com/onthedock/onthedock.github.io.git
$ git remote -v
origin	https://github.com/onthedock/onthedock.github.io.git (fetch)
origin	https://github.com/onthedock/onthedock.github.io.git (push)
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Una vez cambiado el nombre del repositorio, tras una corta espera, el sitio ya es accesible a través de &lt;code&gt;https://onthedock.github.io&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Agregar nueva entrada con Hugo</title>
      <link>https://onthedock.github.io/post/agregar-nueva-entrada-con-hugo/</link>
      <pubDate>Sat, 01 Apr 2017 22:36:46 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/agregar-nueva-entrada-con-hugo/</guid>
      <description>&lt;p&gt;Cómo publicar una entrada usando Hugo, el generador de sitios estáticos, desde la creación del &lt;em&gt;site&lt;/em&gt; hasta la subida de los ficheros en el servidor web.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;algunas-consideraciones-previas&#34;&gt;Algunas consideraciones previas&lt;/h2&gt;

&lt;p&gt;En primer lugar, es importante que Hugo esté correctamente configurado. Asegúrate de que todos los pequeños detalles estén controlados -como que en el parámetro &lt;code&gt;baseURL&lt;/code&gt; se incluya la &lt;code&gt;/&lt;/code&gt; final- y te evitarás un montón de problemas.&lt;/p&gt;

&lt;p&gt;Si haces pruebas en un entorno de integración o consolidación, el único parámetro que hay que modificar al pasar a producción es la &lt;code&gt;baseURL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para evitar confusiones, en esta entrada a la ruta al ejecutable de Hugo la llamo &lt;code&gt;$HUGO/hugo&lt;/code&gt;. El servidor web publica la web desde la carpeta &lt;code&gt;~/web&lt;/code&gt;. Supongo que la ruta a &lt;code&gt;hugo&lt;/code&gt; se encuentra en el &lt;code&gt;$PATH&lt;/code&gt; de tu equipo, por lo que puedes ejecutarlo lanzando &lt;code&gt;hugo&lt;/code&gt; sin necesidad de especificar la ruta al comando.&lt;/p&gt;

&lt;h2 id=&#34;crea-del-sitio&#34;&gt;Crea del sitio&lt;/h2&gt;

&lt;p&gt;El primer paso para crear un sitio con Hugo es crear una carpeta llamada y lanzar el comando &lt;code&gt;hugo new site&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ mkdir mi-sitio-web
$ cd mi-sitio-web
$ hugo new site mi-sitio-web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A continuación, elige un tema (o crea el tuyo propio con &lt;code&gt;hugo new theme&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Configura los parámetros usados en el tema que hayas escogido en el fichero &lt;code&gt;$HUGO/config.toml&lt;/code&gt; y ¡listo!.&lt;/p&gt;

&lt;figure&gt;
  &lt;amp-img src=&#34;https://onthedock.github.io/images/hugo-publicacion-01.png&#34; alt=&#34;Agregar nueva entrada con Hugo images/hugo-publicacion-01.png&#34; width=640 height=412 layout=&#34;responsive&#34;&gt;&lt;/amp-img&gt;
  
&lt;/figure&gt;


&lt;h2 id=&#34;crea-una-entrada&#34;&gt;Crea una entrada&lt;/h2&gt;

&lt;p&gt;Para crear una entrada, lanza el comando &lt;code&gt;hugo new post/nombre-entrada.md&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd mi-sitio-web
$ hugo new post/mi-primera-entrada.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta acción crea el fichero &lt;code&gt;$HUGO/content/post/nueva-entrada.md&lt;/code&gt;.&lt;/p&gt;

&lt;figure&gt;
  &lt;amp-img src=&#34;https://onthedock.github.io/images/hugo-publicacion-02.png&#34; alt=&#34;Agregar nueva entrada con Hugo images/hugo-publicacion-02.png&#34; width=640 height=256 layout=&#34;responsive&#34;&gt;&lt;/amp-img&gt;
  
&lt;/figure&gt;


&lt;h2 id=&#34;edita-la-entrada&#34;&gt;Edita la entrada&lt;/h2&gt;

&lt;p&gt;Abre el fichero de la nueva entrada. Encontrarás algo como:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
title = &amp;quot;mi primera entrada&amp;quot;
thumbnail = &amp;quot;images/thumbnail.png&amp;quot;
categories = [&amp;quot;&amp;quot;]
tags = [&amp;quot;&amp;quot;]
date = &amp;quot;2017-04-01T22:36:46+02:00&amp;quot;

+++

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El contenido de cualquier entrada está compuesto por el &lt;em&gt;frontmatter&lt;/em&gt; (&lt;em&gt;metadata&lt;/em&gt; sobre la entrada) y el contenido de la entrada en sí: cualquier cosa a partir del bloque delimitado por &lt;code&gt;+++&lt;/code&gt;. El contenido &lt;em&gt;por defecto&lt;/em&gt; proviene del contenido de la carpeta &lt;code&gt;$HUGO/theme/{tema-usado}/archetypes/default.md&lt;/code&gt; (el contenido varía según el autor de cada tema).&lt;/p&gt;

&lt;p&gt;Al crear la entrada, además de la información copiada desde el &lt;em&gt;archetype&lt;/em&gt; Hugo añade siempre el título (por defecto, igual que el nombre del fichero) y la fecha.&lt;/p&gt;

&lt;p&gt;Ya puedes escribir tu entrada en cualquier editor de texto. Para dar formato al texto -negritas, cursivas-, crear enlaces, insertar imágenes, etc, se usa el &lt;a href=&#34;https://es.wikipedia.org/wiki/Markdown&#34;&gt;markdown&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para tener una idea de cómo va quedando la entrada, puedes usar &lt;code&gt;hugo server watch&lt;/code&gt;. Hugo incorpora un pequeño servidor web con el que puedes visualizar tu blog en modo &lt;em&gt;borrador&lt;/em&gt;, por llamarlo de algún modo. La opción &lt;code&gt;watch&lt;/code&gt; hace que Hugo regenere automáticamente el blog en cuanto detecte algún cambio. De esta manera puedes ir visualizando cómo queda la entrada antes de publicarla.&lt;/p&gt;

&lt;h2 id=&#34;publica-la-entrada&#34;&gt;Publica la entrada&lt;/h2&gt;

&lt;p&gt;Una vez que satisfecho con la entrada, hay que generar los ficheros que componen el blog.&lt;/p&gt;

&lt;p&gt;El blog es un conjunto de ficheros html, javascript y css en la carpeta &lt;code&gt;$HUGO/public&lt;/code&gt;. Para evitar que se mezclen ficheros de &amp;ldquo;publicaciones&amp;rdquo; anteriores, es recomendable borrar la carpeta antes de generar una nueva versión del blog.&lt;/p&gt;

&lt;p&gt;Para crear estos ficheros a partir de tus entradas y el tema que has escogido, simplemente lanza el comando &lt;code&gt;hugo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hugo hace su magia y genera todos los ficheros necesarios, analizando el contenido de los ficheros. Estos ficheros se generan en la carpeta $HUGO/public`.&lt;/p&gt;

&lt;figure&gt;
  &lt;amp-img src=&#34;https://onthedock.github.io/images/hugo-publicacion-03.png&#34; alt=&#34;Agregar nueva entrada con Hugo images/hugo-publicacion-03.png&#34; width=640 height=428 layout=&#34;responsive&#34;&gt;&lt;/amp-img&gt;
  
&lt;/figure&gt;


&lt;h2 id=&#34;sube-los-ficheros-al-servidor-web&#34;&gt;Sube los ficheros al servidor web&lt;/h2&gt;

&lt;p&gt;El siguiente paso es subir el contenido de la carpeta al servidor web.&lt;/p&gt;

&lt;p&gt;Para evitar que se mezclen los ficheros actuales y los nuevos, primero elimina el contenido de la carpeta del servidor.&lt;/p&gt;

&lt;p&gt;Mi servidor web es una Raspberry Pi B+, así que me conecto vía SSH y elimino el contenido de la carpeta &lt;code&gt;~/web&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ssh pirate@rpi.local
pirate@rpi.local: ~ $ cd web
pirate@rpi.local: ~/web $ rm -rf *
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Después, copio el contendio de &lt;code&gt;$HUGO/public&lt;/code&gt; a &lt;code&gt;~/web&lt;/code&gt; en el servidor remoto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd $HUGO/public
$ scp -r * pirate@rpi.local:/home/pirate/web
&lt;/code&gt;&lt;/pre&gt;

&lt;figure&gt;
  &lt;amp-img src=&#34;https://onthedock.github.io/images/hugo-publicacion-04.png&#34; alt=&#34;Agregar nueva entrada con Hugo images/hugo-publicacion-04.png&#34; width=640 height=428 layout=&#34;responsive&#34;&gt;&lt;/amp-img&gt;
  
&lt;/figure&gt;


&lt;p&gt;Desde un navegador, comprueba que el blog se ha actualizado con la nueva entrada.&lt;/p&gt;

&lt;p&gt;Puedes descargar la referencia para todo el proceso: &lt;a href=&#34;../../images/hugo-publicacion-paso-a-paso.png&#34;&gt;Publicación en Hugo: Referencia&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>De Blogger a Hugo</title>
      <link>https://onthedock.github.io/post/de-blogger-a-hugo/</link>
      <pubDate>Sat, 01 Apr 2017 18:10:12 +0200</pubDate>
      
      <guid>https://onthedock.github.io/post/de-blogger-a-hugo/</guid>
      <description>&lt;p&gt;Porqué me estoy planteando dejar Blogger y pasar a un sitio estático gracias a Hugo.&lt;/p&gt;

&lt;p&gt;Hugo es un &lt;em&gt;generador de sitios estáticos&lt;/em&gt; a partir de ficheros en formato &lt;em&gt;markdown&lt;/em&gt;. Hugo aplica una plantilla al contenido de los ficheros en formato &lt;em&gt;markdon&lt;/em&gt; y crea los ficheros HTML.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;motivación&#34;&gt;Motivación&lt;/h2&gt;

&lt;p&gt;Aunque llevo &lt;em&gt;toda la vida&lt;/em&gt; con un blog personal en &lt;a href=&#34;https://www.blogger.com/&#34;&gt;Blogger&lt;/a&gt;, Google ha desatendido la plataforma y poco a poco se ha ido quedando atrás en prestaciones.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://ghost.org&#34;&gt;Ghost&lt;/a&gt; es la platforma que cada vez más desarrolladores y escritores &lt;em&gt;técnicos&lt;/em&gt; usan, tanto en la versión alojada como en sus propias instalaciones. Es la que me gustaría usar para mis blogs: soporta &lt;em&gt;markdown&lt;/em&gt; y no se entromete en el proceso ni de escribir ni de publicar los artículos.&lt;/p&gt;

&lt;p&gt;Mi objetivo era ejecutar Ghost en la Raspberry Pi, pero al no existir soporte de SQLite para la arquitectura ARM, las imágenes para &lt;a href=&#34;https://github.com/alexellis/ghost-on-docker&#34;&gt;&lt;em&gt;contenedores&lt;/em&gt; Docker&lt;/a&gt; están desactualizadas y no siempre son fáciles de &lt;em&gt;construir&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Por otro lado, el objetivo del blog en la Raspberry Pi es documentar el proceso de aprendizaje sobre  Docker y Kubernetes (además de Linux). A diferencia de lo que pasaba en mi anterior trabajo, donde estuve usando Hugo de forma &lt;em&gt;experimental&lt;/em&gt;, ahora estas notas no contienen ningún tipo de información privada, por lo que publicaré también los artículos en internet.&lt;/p&gt;

&lt;p&gt;En mis pruebas Hugo se integró en el flujo de trabajo diario sin interferir lo más mínimo, por lo que resultó una experiencia muy positiva.&lt;/p&gt;

&lt;p&gt;Quiero combinar este blog (orientado al avance, a las pruebas, es decir, al proceso) con Dokuwiki (como almacén de conocimiento y documentación). Sin embargo, con Dokuwiki la  &lt;em&gt;dualidad&lt;/em&gt; entre en entorno &lt;em&gt;local&lt;/em&gt; (en casa) y en internet es más difícil de conseguir de forma directa (usando recursos gratuitos). Tengo un &lt;a href=&#34;http://wiki-ameisin.rhcloud.com/&#34;&gt;contenedor en OpenShift&lt;/a&gt; con notas sobre diferentes temas, pero en esta instancia de Dokuwiki en OpenShift las carpetas de datos tienen una estructura diferente a la estándar, lo que dificulta mantener &lt;em&gt;sincronizadas&lt;/em&gt; la versión &lt;em&gt;local&lt;/em&gt; y la alojada en el &lt;em&gt;cloud&lt;/em&gt; de Red Hat.&lt;/p&gt;

&lt;h2 id=&#34;hugo&#34;&gt;Hugo&lt;/h2&gt;

&lt;p&gt;La idea detrás de un generador de sitios estáticos es que, en muchas ocasiones, no es necesario disponer de toda la potencia que ofrecen las plataformas de &lt;em&gt;blogging&lt;/em&gt; modernas como &lt;a href=&#34;https://wordpress.org&#34;&gt;Wordpress&lt;/a&gt;, etc. Además, estas plataformas no son siempre fáciles de instalar, configurar y mantener en tu propio entorno local.&lt;/p&gt;

&lt;p&gt;La alternativa es mantener un sitio web a partir de ficheros HTML independientes, pero resulta muy costoso en tiempo y esfuerzo.&lt;/p&gt;

&lt;p&gt;A medio camino se encuentran los generadores de sitios como &lt;a href=&#34;https://jekyllrb.com&#34;&gt;Jekill&lt;/a&gt; o &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Estos &lt;em&gt;generadores de sitios estáticos&lt;/em&gt; parten de ficheros en formato &lt;em&gt;markdown&lt;/em&gt; -que son sencillos de escribir- y se encargan de combinarlos con unas plantillas, generar los enlaces entre los diferentes artículos, crear nubes de etiquetas, etc (la parte tediosa) hasta generar los ficheros HTML.&lt;/p&gt;

&lt;p&gt;Al final del proceso, tenemos un conjunto de ficheros &lt;em&gt;web&lt;/em&gt; (HTML, javascript, css) que podemos alojar en cualquier servidor (o en servicios como &lt;a href=&#34;https://pages.github.com&#34;&gt;GitHub Pages&lt;/a&gt; o &lt;a href=&#34;https://confluence.atlassian.com/bitbucket/publishing-a-website-on-bitbucket-cloud-221449776.html&#34;&gt;Bitbucket&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;siguientes-pasos&#34;&gt;Siguientes pasos&lt;/h2&gt;

&lt;p&gt;En estas fase inicial, únicamente tengo un contenedor con un servidor web (Nginx) sirviendo el sitio estático generado por Hugo (en un portátil).&lt;/p&gt;

&lt;p&gt;Más adelante quiero incluir también un contenedor con Hugo (como el proporcionado por &lt;a href=&#34;https://hub.docker.com/r/hypriot/rpi-hugo/&#34;&gt;Hypriot&lt;/a&gt;) e ir añadiendo poco a poco todas las herramientas del proceso de Integración Continua -en forma de contenedores- desde el &lt;em&gt;código fuente&lt;/em&gt; al sitio web publicado automáticamente con cada cambio. Como se apunta en la entrada &lt;a href=&#34;https://blog.hypriot.com/post/static-website-generation-on-steriods-with-docker/&#34;&gt;Static Website Generation on Steriods with Docker&lt;/a&gt;, la idea es montar una cadena de &lt;a href=&#34;https://es.wikipedia.org/wiki/Integración_continua&#34;&gt;CI&lt;/a&gt;: GoGS (repositorio de código &lt;em&gt;a lo Github&lt;/em&gt;), &lt;a href=&#34;https://github.com/drone/drone&#34;&gt;Drone&lt;/a&gt; (el &lt;em&gt;motor&lt;/em&gt; de Integración Continua: como &lt;a href=&#34;https://es.wikipedia.org/wiki/Jenkins&#34;&gt;Jenkins&lt;/a&gt;, pero escrito en Go) y para el &lt;em&gt;deployment&lt;/em&gt;, una mezcla de &lt;a href=&#34;https://hub.docker.com/r/xaviaznar/rpi-alpine-nginx/&#34;&gt;Nginx&lt;/a&gt; (publicación local) y &lt;a href=&#34;https://bitbucket.org/product&#34;&gt;Bitbucket&lt;/a&gt; (publicación en internet).&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>